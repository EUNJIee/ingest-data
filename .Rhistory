install.packages("knitr")
install.packages("ggplot2")
install.packages("dplyr")
# https://www.lucypark.kr/courses/2015-dm/text-mining.html
library(reticulate)
import nltk
repl_python()
setwd("~/swc/ingest-data")
devtools::install_github("hrbrmstr/mqtt")
devtools::install_github("hrbrmstr/mqtt")
library(reticulate)
use_condaenv("anaconda3")
reticulate::repl_python()
import paho.mqtt.client as mqtt
# The callback for when the client receives a CONNACK response from the server.
def on_connect(client, userdata, rc):
print("Connected with result code "+str(rc))
# Subscribing in on_connect() means that if we lose the connection and
# reconnect then subscriptions will be renewed.
client.subscribe("$SYS/#")
# The callback for when a PUBLISH message is received from the server.
def on_message(client, userdata, msg):
print(msg.topic+" "+str(msg.payload))
client = mqtt.Client()
client.on_connect = on_connect
client.on_message = on_message
client.connect("iot.eclipse.org", 1883, 60)
# Blocking call that processes network traffic, dispatches callbacks and
# handles reconnecting.
# Other loop*() functions are available that give a threaded interface and a
# manual interface.
client.loop_forever()
reticulate::repl_python()
import paho.mqtt.client as mqtt
# The callback for when the client receives a CONNACK response from the server.
def on_connect(client, userdata, rc):
print("Connected with result code "+str(rc))
# Subscribing in on_connect() means that if we lose the connection and
# reconnect then subscriptions will be renewed.
client.subscribe("$SYS/#")
# The callback for when a PUBLISH message is received from the server.
def on_message(client, userdata, msg):
print(msg.topic+" "+str(msg.payload))
client = mqtt.Client()
client.on_connect = on_connect
client.on_message = on_message
client.connect("iot.eclipse.org", 1883, 60)
# Blocking call that processes network traffic, dispatches callbacks and
# handles reconnecting.
# Other loop*() functions are available that give a threaded interface and a
# manual interface.
client.loop_forever()
reticulate::repl_python()
import paho.mqtt.subscribe as subscribe
# Retrieve one message
msg = subscribe.simple("/outbox/crouton-demo/temperature", hostname="https://iot.eclipse.org/")
# Print topic and payload
print(f"{msg.topic}, {msg.payload}")
reticulate::repl_python()
